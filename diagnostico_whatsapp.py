#!/usr/bin/env python3
"""
Script de diagn√≥stico para problemas de WhatsApp con Twilio
"""
import requests
import json
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def diagnosticar_whatsapp():
    print("üîç DIAGN√ìSTICO DE WHATSAPP - TWILIO")
    print("="*60)
    
    # 1. Verificar configuraci√≥n local
    print("\n1Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN LOCAL...")
    
    twilio_sid = os.getenv('TWILIO_ACCOUNT_SID')
    twilio_token = os.getenv('TWILIO_AUTH_TOKEN')
    twilio_number = os.getenv('TWILIO_WHATSAPP_NUMBER')
    
    if twilio_sid:
        print(f"   ‚úÖ TWILIO_ACCOUNT_SID: {twilio_sid[:10]}...")
    else:
        print("   ‚ùå TWILIO_ACCOUNT_SID no encontrado")
    
    if twilio_token:
        print(f"   ‚úÖ TWILIO_AUTH_TOKEN: {twilio_token[:10]}...")
    else:
        print("   ‚ùå TWILIO_AUTH_TOKEN no encontrado")
        
    if twilio_number:
        print(f"   ‚úÖ TWILIO_WHATSAPP_NUMBER: {twilio_number}")
    else:
        print("   ‚ùå TWILIO_WHATSAPP_NUMBER no encontrado")
    
    # 2. Verificar webhook endpoint
    print("\n2Ô∏è‚É£ VERIFICANDO WEBHOOK ENDPOINT...")
    railway_url = "https://chatbot-production-ec53.up.railway.app"
    
    try:
        # Test GET (verificaci√≥n de webhook)
        verify_params = {
            'hub.verify_token': 'panaderia_jos_mar_2025',
            'hub.challenge': 'test_challenge_diagnostico'
        }
        
        response = requests.get(f"{railway_url}/webhook", params=verify_params, timeout=10)
        if response.status_code == 200 and response.text == 'test_challenge_diagnostico':
            print("   ‚úÖ Webhook verification (GET) funcionando")
        else:
            print(f"   ‚ùå Webhook verification fall√≥: {response.status_code}")
            
        # Test POST (mensaje simulado)
        test_data = {
            'From': 'whatsapp:+51999999999',
            'Body': 'test_diagnostico',
            'MessageSid': 'test_diagnostico_123'
        }
        
        response = requests.post(
            f"{railway_url}/webhook",
            data=test_data,
            headers={'Content-Type': 'application/x-www-form-urlencoded'},
            timeout=15
        )
        
        if response.status_code == 200:
            print("   ‚úÖ Webhook POST funcionando")
            if '<Message>' in response.text:
                print("   ‚úÖ Respuesta en formato TwiML correcto")
            else:
                print("   ‚ö†Ô∏è  Respuesta no est√° en formato TwiML")
                print(f"      Respuesta: {response.text[:100]}...")
        else:
            print(f"   ‚ùå Webhook POST fall√≥: {response.status_code}")
            print(f"      Error: {response.text[:100]}...")
            
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
    
    # 3. Verificar configuraci√≥n de Twilio (usando API)
    print("\n3Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN DE TWILIO...")
    
    if twilio_sid and twilio_token:
        try:
            from twilio.rest import Client
            client = Client(twilio_sid, twilio_token)
            
            # Verificar cuenta
            account = client.api.accounts(twilio_sid).fetch()
            print(f"   ‚úÖ Cuenta Twilio: {account.friendly_name}")
            print(f"   üì± Status: {account.status}")
            
            # Verificar configuraci√≥n del sandbox
            try:
                sandbox = client.messaging.v1.services.list(limit=1)
                if sandbox:
                    print("   ‚úÖ Servicio de mensajer√≠a encontrado")
                else:
                    print("   ‚ö†Ô∏è  No se encontraron servicios de mensajer√≠a")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  No se pudo verificar sandbox: {str(e)[:100]}...")
                
        except ImportError:
            print("   ‚ö†Ô∏è  Librer√≠a twilio no instalada (no es cr√≠tico)")
        except Exception as e:
            print(f"   ‚ùå Error conectando con Twilio API: {str(e)[:100]}...")
    else:
        print("   ‚ùå Credenciales de Twilio no disponibles")
    
    # 4. Diagn√≥stico de problemas comunes
    print("\n4Ô∏è‚É£ DIAGN√ìSTICO DE PROBLEMAS COMUNES...")
    
    print("\nüîß POSIBLES PROBLEMAS Y SOLUCIONES:")
    print("="*60)
    
    print("\n‚ùì PROBLEMA 1: No has configurado el webhook en Twilio")
    print("   üí° SOLUCI√ìN:")
    print("   1. Ve a: https://console.twilio.com/")
    print("   2. Messaging ‚Üí Try it out ‚Üí Send a WhatsApp message")
    print("   3. En 'Webhook URL' pon: https://chatbot-production-ec53.up.railway.app/webhook")
    print("   4. HTTP Method: POST")
    print("   5. Guarda la configuraci√≥n")
    
    print("\n‚ùì PROBLEMA 2: No te has unido al sandbox")
    print("   üí° SOLUCI√ìN:")
    print("   1. Agrega +1 (415) 523-8886 a WhatsApp")
    print("   2. Env√≠a: 'join helpful-spider'")
    print("   3. Espera el mensaje de confirmaci√≥n")
    
    print("\n‚ùì PROBLEMA 3: C√≥digo de sandbox incorrecto")
    print("   üí° SOLUCI√ìN:")
    print("   1. Ve a la consola de Twilio")
    print("   2. Busca el c√≥digo actual del sandbox")
    print("   3. Debe ser algo como 'join [palabra-palabra]'")
    print("   4. Env√≠a el c√≥digo correcto")
    
    print("\n‚ùì PROBLEMA 4: Webhook URL mal configurada")
    print("   üí° VERIFICAR:")
    print("   - URL exacta: https://chatbot-production-ec53.up.railway.app/webhook")
    print("   - HTTP Method: POST")
    print("   - No hay espacios extra")
    print("   - Incluye 'https://' al inicio")
    
    print("\n‚ùì PROBLEMA 5: N√∫mero de sandbox ha cambiado")
    print("   üí° VERIFICAR:")
    print("   - N√∫mero actual en consola Twilio")
    print("   - Puede ser diferente a +1 (415) 523-8886")
    
    # 5. Test manual de webhook
    print(f"\n5Ô∏è‚É£ TEST MANUAL INTERACTIVO...")
    print("="*40)
    
    while True:
        test_message = input("\nüí¨ Mensaje para probar (o 'exit'): ")
        if test_message.lower() in ['exit', 'quit', 'salir']:
            break
            
        if not test_message.strip():
            continue
            
        print(f"üì§ Probando: '{test_message}'")
        
        try:
            test_data = {
                'From': 'whatsapp:+51999999999',
                'Body': test_message,
                'MessageSid': f'manual_test_{int(__import__("time").time())}'
            }
            
            response = requests.post(
                f"{railway_url}/webhook",
                data=test_data,
                headers={'Content-Type': 'application/x-www-form-urlencoded'},
                timeout=15
            )
            
            print(f"üì® Status: {response.status_code}")
            
            if response.status_code == 200:
                if '<Message>' in response.text:
                    start = response.text.find('<Message>') + 9
                    end = response.text.find('</Message>')
                    if start > 8 and end > start:
                        bot_message = response.text[start:end]
                        print(f"‚úÖ Respuesta del bot:")
                        print(f"   {bot_message}")
                else:
                    print(f"‚ö†Ô∏è  Respuesta: {response.text[:150]}...")
            else:
                print(f"‚ùå Error: {response.text[:100]}...")
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
    
    print(f"\n{'='*60}")
    print("üéØ RESUMEN DEL DIAGN√ìSTICO:")
    print("‚úÖ Tu app en Railway funciona correctamente")
    print("‚úÖ El webhook responde bien a las pruebas")
    print("‚ùì El problema est√° en la configuraci√≥n de Twilio")
    print(f"{'='*60}")

if __name__ == "__main__":
    diagnosticar_whatsapp()
