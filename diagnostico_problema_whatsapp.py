#!/usr/bin/env python3
"""
Script de diagn√≥stico espec√≠fico para el problema de WhatsApp sin respuesta
"""
import requests
import time

def diagnosticar_problema_whatsapp():
    railway_url = "https://chatbot-production-ec53.up.railway.app"
    
    print("üîç DIAGN√ìSTICO ESPEC√çFICO - SIN RESPUESTA EN WHATSAPP")
    print("="*60)
    print("HTTP 200 ‚úÖ pero sin respuesta en WhatsApp ‚ùå")
    print("="*60)
    
    # Test exacto como lo env√≠a Twilio
    print("\n1Ô∏è‚É£ SIMULANDO MENSAJE EXACTO DE TWILIO...")
    print("-"*50)
    
    test_data = {
        'From': 'whatsapp:+51999999999',
        'To': 'whatsapp:+14155238886',
        'Body': 'Hola',
        'MessageSid': 'SM_test_diagnostico',
        'AccountSid': 'AC_test',
        'MessagingServiceSid': 'MG_test'
    }
    
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'TwilioProxy/1.1'
    }
    
    try:
        print(f"üì§ Enviando exactamente como Twilio...")
        print(f"   Data: {test_data}")
        print(f"   Headers: {headers}")
        
        response = requests.post(
            f"{railway_url}/webhook", 
            data=test_data, 
            headers=headers, 
            timeout=15
        )
        
        print(f"\nüì® RESPUESTA:")
        print(f"   Status Code: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        print(f"   Content-Type: {response.headers.get('Content-Type')}")
        print(f"   Content Length: {len(response.text)}")
        
        if response.status_code == 200:
            print("   ‚úÖ HTTP 200 - OK")
            
            # Verificar formato TwiML
            response_text = response.text
            print(f"\nüìù CONTENIDO DE LA RESPUESTA:")
            print(f"   Texto completo: {repr(response_text)}")
            
            if '<?xml' in response_text and '<Response>' in response_text:
                print("   ‚úÖ Formato TwiML correcto")
                
                if '<Message>' in response_text and '</Message>' in response_text:
                    print("   ‚úÖ Elemento Message encontrado")
                    
                    # Extraer mensaje
                    start = response_text.find('<Message>') + 9
                    end = response_text.find('</Message>')
                    if start > 8 and end > start:
                        message_content = response_text[start:end]
                        print(f"   üí¨ Contenido del mensaje: {repr(message_content)}")
                        
                        if len(message_content.strip()) > 0:
                            print("   ‚úÖ Mensaje no est√° vac√≠o")
                        else:
                            print("   ‚ùå PROBLEMA: Mensaje est√° vac√≠o")
                    else:
                        print("   ‚ùå PROBLEMA: No se pudo extraer contenido del mensaje")
                else:
                    print("   ‚ùå PROBLEMA: No hay elemento <Message> en TwiML")
            else:
                print("   ‚ùå PROBLEMA: Respuesta no est√° en formato TwiML")
                print("   Expected: <?xml...><Response><Message>...")
                print(f"   Got: {response_text[:200]}...")
        else:
            print(f"   ‚ùå Error HTTP: {response.status_code}")
            print(f"   Error content: {response.text}")
    
    except Exception as e:
        print(f"   ‚ùå Error de conexi√≥n: {e}")
    
    # Verificar con otros mensajes
    print(f"\n2Ô∏è‚É£ PROBANDO OTROS MENSAJES...")
    print("-"*50)
    
    test_messages = ['hola', 'productos', 'test', 'ayuda']
    
    for msg in test_messages:
        print(f"\n   Probando: '{msg}'")
        test_data['Body'] = msg
        
        try:
            response = requests.post(
                f"{railway_url}/webhook", 
                data=test_data, 
                headers=headers, 
                timeout=10
            )
            
            if response.status_code == 200:
                if '<Message>' in response.text:
                    start = response.text.find('<Message>') + 9
                    end = response.text.find('</Message>')
                    if start > 8 and end > start:
                        content = response.text[start:end]
                        print(f"      ‚úÖ Respuesta: {content[:60]}...")
                    else:
                        print("      ‚ùå Sin contenido en mensaje")
                else:
                    print("      ‚ùå Sin elemento Message")
            else:
                print(f"      ‚ùå Error: {response.status_code}")
        except Exception as e:
            print(f"      ‚ùå Error: {str(e)[:40]}...")
        
        time.sleep(1)  # Esperar entre requests
    
    print(f"\n{'='*60}")
    print("üìä DIAGN√ìSTICO COMPLETADO")
    print("='*60")
    
    print("\nüîß POSIBLES CAUSAS DEL PROBLEMA:")
    print("1. ‚ùì Configuraci√≥n incorrecta en Twilio Console")
    print("2. ‚ùì Webhook URL no actualizada en Twilio")
    print("3. ‚ùì Sandbox de Twilio no configurado correctamente")
    print("4. ‚ùì N√∫mero no registrado en el sandbox")
    print("5. ‚ùì Delay en la entrega de mensajes de Twilio")
    
    print("\nüí° SIGUIENTES PASOS:")
    print("1. Verifica la configuraci√≥n exacta en Twilio Console")
    print("2. Revisa los logs en Railway mientras env√≠as un mensaje")
    print("3. Confirma que recibiste la confirmaci√≥n del sandbox")
    print("4. Prueba enviar mensajes simples como 'test'")

if __name__ == "__main__":
    diagnosticar_problema_whatsapp()
